# Run WGCNA 


dat0<-read.csv("vst_tpm.csv")


datExpr0 = as.data.frame(t(dat0[, 2:59]))
names(datExpr0) = dat0$target_id;
names(datExpr0)

rownames(datExpr0) = names(dat0)[2:59];
rownames(datExpr0)

gsg = goodSamplesGenes(datExpr0, verbose = 3);
gsg$allOK
dim(datExpr0)
meanExpressionByArray=apply( datExpr0,1,mean, na.rm=T)
NumberMissingByArray=apply( is.na(data.frame(datExpr0)),1, sum)
no.presentdatExpr0=as.vector(apply(!is.na(as.matrix(datExpr0)),2, sum) )
variancedatExpr0=as.vector(apply(as.matrix(datExpr0),2,var, na.rm=T))
KeepGenes= variancedatExpr0>0 & no.presentdatExpr0>=4
datExpr=datExpr0[, KeepGenes]
dim(datExpr)

names(datExpr)
datExpr[1,1]
#pick the threshold


powers = c(c(1:10), seq(from =12, to=30, by=2))
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)


#plot the scale independence 



par(mfrow = c(1,2))
cex1 = 0.9
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
     main = paste("Scale independence"))

text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     labels=powers,cex=cex1,col="red")

# this line corresponds to using an R^2 cut-off of h
abline(h=0.8, col="blue")

plot(sft$fitIndices[,1], sft$fitIndices[,5],
     xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
     main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
##Blockwise module detection 



bwnet = blockwiseModules(datExpr, corType = "pearson", maxBlockSize = 5000, 
                         networkType = "unsigned", power = 16, minModuleSize = 30, mergeCutHeight = 0.25, 
                         numericLabels = TRUE, saveTOMs = TRUE, pamRespectsDendro = FALSE, saveTOMFileBase = "light_TOM-blockwise", 
                         verbose = 3)



#### Plot for all of the sample from datExpr in each module 

plotMat(t(scale(datExpr[,moduleColors==which.module]) ),nrgcols=30,rlabels=T, clabels=T,rcols=which.module, main=which.module )

module_colors= setdiff(unique(moduleColors), "grey")
for (color in module_colors){
  module=names(datExpr)[which(moduleColors==color)]
  write.table(module, paste("module_",color, ".txt",sep=""), sep="\t", row.names=FALSE, col.names=FALSE,quote=FALSE)
}

#plot dendrogram for each block


plotDendroAndColors(bwnet$dendrograms[[1]], bwModuleColors[bwnet$blockGenes[[1]]], "bwModuleColors", main = "Gene dendrogram and module colors in block 1", dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05)



#module detection


adjacency = adjacency(datExpr, power = 16);

#Calculate topological overlap anew: this could be done more efficiently by saving the TOM

TOM = TOMsimilarityFromExpr(datExpr, power = 10)

dissTOM = 1-TOM


#clustering using TOM

# Call the hierarchical clustering function
geneTree = hclust(as.dist(dissTOM), method = "average");
# Plot the resulting clustering tree (dendrogram)
sizeGrWindow(12,9)
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE, hang = 0.04);


# We like large modules, so we set the minimum module size relatively high:
minModuleSize = 30;
# Module identification using dynamic tree cut:
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
deepSplit = 2, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize);
table(dynamicMods)


# Convert numeric lables into colors
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)
# Plot the dendrogram and colors underneath
sizeGrWindow(8,6)
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05,
main = "Gene dendrogram and module colors")


#Merging of modules whose expression profiles are very similar

# Calculate eigengenes
MEList = moduleEigengenes(datExpr, colors = dynamicColors)
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");
# Plot the result
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")


MEDissThres = 0.25
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
# Call an automatic merging function
merge = mergeCloseModules(datExpr, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors;
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs;


sizeGrWindow(12, 9)
#pdf(file = "Plots/geneDendro-3.pdf", wi = 9, he = 6)
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
#dev.off()

# Rename to moduleColors
moduleColors = mergedColors
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
MEs = mergedMEs;
# Save module colors and labels for use in subsequent parts
save(MEs, moduleLabels, moduleColors, geneTree, file = "light-signaling-networkConstruction-stepByStep.RData")



# B. Zhang and S. Horvath. A general framework for weighted gene co-expression network analysis. Statistical
Applications in Genetics and Molecular Biology, 4(1):Article 17, 2005
